/*
ID: ikalvin1
LANG: JAVA
TASK: bcs
 */
import java.io.*;
import java.util.*;

public class bcs {
	public static void main(String[] args) throws IOException {
		// Scanner s = new Scanner(new File("bcs.in"));
		Scanner s = new Scanner(new File("bcs.txt"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(
				"bcs.out")));

		int n = s.nextInt();
		int k = s.nextInt();

		char[][] original = new char[n][n];

		// read in original figurine into 2d array
		for (int row = 0; row < n; row++) {
			String c = s.next();
			for (int col = 0; col < n; col++) {
				original[row][col] = c.charAt(col);
			}

		}

		char[][] first = new char[n][n];

		// read in first piece into 2d array
		for (int row = 0; row < n; row++) {
			String c = s.next();
			for (int col = 0; col < n; col++) {
				first[row][col] = c.charAt(col);
			}

		}

		char[][] second = new char[n][n];
		
		// read in second piece into 2d array
		for (int row = 0; row < n; row++) {
			String c = s.next();
			for (int col = 0; col < n; col++) {
				second[row][col] = c.charAt(col);
			}

		}

		pushRight(first);

		out.close();

	}

	public static void printArray(char[][] array) {
		System.out.println();
		for (int i = 0; i < array.length; i++) {
			for (int j = 0; j < array[i].length; j++) {
				System.out.print(array[i][j]);
			}
			System.out.println();
		}
	}

	// method to push piece to right border of board
	public static void pushRight(char[][] a) {
		boolean found = false;
		int numRows = a.length - 1;
		int numCols = a[0].length - 1;
		int foundRow = 0;
		int foundCol = 0;
		char[][] output = new char[a.length][a.length];

		// fill the new board with "."
		for (int row = 0; row < a.length; row++) {
			for (int col = 0; col < a[row].length; col++) {
				output[row][col] = '.';
			}
		}

		printArray(output);
		printArray(a);

		// this for loop will find which '#' is farthest to the right on the
		// board
		// start at rightmost col and go left
		for (int col = a.length - 1; col >= 0 && !found; col--) {
			for (int row = 0; row < a.length && !found; row++) {
				if (a[row][col] == '#') {
					found = true;
					foundRow = row;
					foundCol = col;
				}
			}
		}

		// check how far the # is from the right border
		int distFromRightBorder = numCols - foundCol;

		// push all pieces to the right however much is needed for it to go
		for (int row = 0; row < a.length; row++) {
			for (int col = 0; col < a[row].length; col++) {
				if (a[row][col] == '#') {
					output[row][col + distFromRightBorder] = '#';
				}
			}
		}
		printArray(output);
	}

	// method to push piece to left border of board
	public static void pushLeft(char[][] a) {
		boolean found = false;
		int numRows = a.length - 1;
		int numCols = a[0].length - 1;
		int foundRow = 0;
		int foundCol = 0;
		char[][] output = new char[a.length][a.length];

		// fill the new board with "."
		for (int row = 0; row < a.length; row++) {
			for (int col = 0; col < a[row].length; col++) {
				output[row][col] = '.';
			}
		}

		printArray(output);
		printArray(a);

		// this for loop will find which '#' is farthest to the left on the
		// board
		// start at rightmost col and go left
		for (int col = 0; col < a[0].length && !found; col++) {
			for (int row = 0; row < a.length && !found; row++) {
				if (a[row][col] == '#') {
					found = true;
					foundRow = row;
					foundCol = col;
				}
			}
		}

		// check how far the # is from the right border
		int distFromLeftBorder = foundCol;

		// push all pieces to the left however much is needed for it to go
		for (int row = 0; row < a.length; row++) {
			for (int col = 0; col < a[row].length; col++) {
				if (a[row][col] == '#') {
					output[row][col - distFromLeftBorder] = '#';
				}
			}
		}
		printArray(output);
	}
}
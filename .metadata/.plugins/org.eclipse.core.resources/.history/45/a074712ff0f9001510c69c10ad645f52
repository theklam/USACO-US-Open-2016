/*
ID: ikalvin1
LANG: JAVA
TASK: reduce
 */
import java.io.*;
import java.util.*;

public class reduce {
	public static void main(String[] args) throws IOException {
		Scanner s = new Scanner(new File("reduce.in"));
		// Scanner s = new Scanner(new File("reduce.txt"));
		PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(
				"reduce.out")));

		ArrayList<Integer> xpos = new ArrayList<Integer>();
		ArrayList<Integer> ypos = new ArrayList<Integer>();
		int minXpos = 10000;
		int maxXpos = -10000;
		int minYpos = 10000;
		int maxYpos = -10000;

		int n = s.nextInt();
		while (s.hasNext()) {
			xpos.add(s.nextInt());
			ypos.add(s.nextInt());
		}

		// calculate max and min cows
		maxXpos = Collections.max(xpos);
		minXpos = Collections.min(xpos);
		maxYpos = Collections.max(ypos);
		minYpos = Collections.min(ypos);

		// remove cow farthest to the right
		int indexXRightCow = xpos.indexOf(maxXpos);
		xpos.remove(indexXRightCow);
		ypos.remove(indexXRightCow);

		// recalculate max and min cows
		maxXpos = Collections.max(xpos);
		minXpos = Collections.min(xpos);
		maxYpos = Collections.max(ypos);
		minYpos = Collections.min(ypos);
		int rightArea = (maxXpos - minXpos) * (maxYpos - minYpos);

		// remove cow farthest to the left
		int indexXLeftCow = xpos.indexOf(minXpos);
		xpos.remove(indexXLeftCow);
		ypos.remove(indexXLeftCow);

		// recalculate max and min cows
		maxXpos = Collections.max(xpos);
		minXpos = Collections.min(xpos);
		maxYpos = Collections.max(ypos);
		minYpos = Collections.min(ypos);
		int leftArea = (maxXpos - minXpos) * (maxYpos - minYpos);

		out.close();

	}
}